err.fct="sse",
linear.output=FALSE
)
plot.nn(out)
test <<- data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, d06.monthly[,"mon12"])
}
predict()
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
linear.output=FALSE
)
plot.nn(out)
test <<- as.ata.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, test)
}
predict()
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, test)
}
predict()
require(neuralnet)
require(RMySQL)
require(ff)
require(googleVis)
require(Metrics)
row.size <- 52560
row.size.monthly <<- 4380
mat.size <<- 12
powdata <- ff(NA, dim=row.size, vmode="double")
query <- "select t.pow from onshore_SITE_07829 t where (t.mesdt >= 20060101 && t.mesdt < 20070101);"
drv <- dbDriver("MySQL")
con <- dbConnect(drv, host="localhost", dbname="eastwind", user="sachin", pass="password")
powdata <<- data.frame(dbGetQuery(con, statement=query), check.names=FALSE)
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, test)
}
predict()
compute(out, test)
compute(out, test)
typeof(test)
dim(test)
compute(out, test[,1])
typeof(out)
dim(out)
typeof(out)
length(out)
plot(as.vector(unlist(out)))
plot(as.vector(unlist(out$net.results)))
(1:10)^2
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
act.fct = "tanh",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, test)
}
predict()
predict()
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
act.fct = "tanh",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, seq(1,1000))
}
predict()
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
act.fct = "tanh",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, test[,1])
}
predict()
compute(out, test[,1])
length(test[,1])
head(test[,1])
head(out$net.results)
head(out$net.result)
head(unlist(out$net.result))
typeof(out)
plot(as.vector(unlist(out$net.results)))
length(as.vector(unlist(out$net.results)))
length(unlist(out$net.results))
length(unlist(out$net.result))
length(as.vector(unlist(out$net.result)))
length(as.vector(unlist(out$net.result)))[43000:43800]
length(as.vector(unlist(out$net.result)))
length(as.vector(unlist(out$net.result)))[1:4000]
head(as.vector(unlist(out$net.result)))
tmp <- as.vector(unlist(out$net.result))
tmp[1:100]
plot(tmp)
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1, #+ mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
act.fct = "tanh",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
pred <<- compute(out, test[,1])
}
predict()
x = test
y = as.vector(unlist(pred))
x = test
y = as.vector(unlist(pred))
plot(y, type="l", col="blue")
y = as.vector(unlist(pred))[4385:8765]
plot(y, type="l", col="blue")
x = test
y = as.vector(unlist(pred))[4385:8765]
dataToPlot = data.frame(seq(1,4380),x,y)
length(y)
y = as.vector(unlist(pred))[4386:8765]
dataToPlot = data.frame(seq(1,4380),x,y)
Line <- gvisLineChart(dataToPlot)
plot(Line)
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
act.fct = "tanh",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
#pred <<- compute(out, test[,1])
}
predict()
compute(out, test[,1])
typeof(test)
typeof(test[,1])
compute(out, test[,1])
Var1 <- runif(50, 0, 100)
sqrt.data <- data.frame(Var1, Sqrt=sqrt(Var1))
print(net.sqrt <- neuralnet(Sqrt~Var1, sqrt.data, hidden=10,threshold=0.01))
compute(net.sqrt, (1:10)^2)$net.result
compute(net.sqrt, (1:10)^2)$net.result
net.sqrt
print(net.sqrt$net.result)
plot(net.sqrt$net.result, type="l")
plot(unlist(net.sqrt$net.result), type="l")
res = compute(net.sqrt, (1:10)^2)$net.result
plot(res)
plot(res, type="l")
res = compute(net.sqrt, (1:10)^2)$net.result
plot(res, type="l")
res = compute(net.sqrt, (1:10)^2)
plot(res, type="l")
typeof(res)
plot(unlist(res), type="l")
plot(unlist(net.sqrt$net.result), type="l")
plot(unlist(res), type="l")
require(neuralnet)
require(RMySQL)
require(ff)
require(googleVis)
require(Metrics)
row.size <- 52560
row.size.monthly <<- 4380
mat.size <<- 12
powdata <- ff(NA, dim=row.size, vmode="double")
query <- "select t.pow from onshore_SITE_07829 t where (t.mesdt >= 20060101 && t.mesdt < 20070101);"
drv <- dbDriver("MySQL")
con <- dbConnect(drv, host="localhost", dbname="eastwind", user="sachin", pass="password")
powdata <<- data.frame(dbGetQuery(con, statement=query), check.names=FALSE)
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
act.fct = "tanh",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
#pred <<- compute(out, test[,1])
}
res <- out$net.result
res <<- out$net.result
predict()
res <- out$net.result
length(res)
plot(res)
typeof(res)
length(res)
res <- unlist(out$net.result)
dim(res)
length(res)
plot(res)
predict <- function(){
d06 <- as.vector(c(unlist(powdata)))
d06.monthly <- matrix(d06, nrow=row.size.monthly, ncol=mat.size, byrow=FALSE)
colnames(d06.monthly) <- paste("mon",c(1:12), sep="")
data.mat <- data.frame(d06.monthly)
#out <- neuralnet(mon11 ~ mon1+mon2+mon3+mon4+mon5+mon6+mon7+mon8+mon9+mon10,
#                 data.mat,
#                 hidden =1,
#                 #threshold = 0.01,
#                 #stepmax = 1000,
#                 rep = 10,
#                   startweights = NULL,
#                   learningrate.limit = NULL,
#                   learningrate.factor = list(minus = 0.5, plus = 1.2),
#                   learningrate=10,
#                   #lifesign = "none",
#                   #lifesign.step = 1000,
#                   algorithm = "backprop",
#                   err.fct = "sse",
#                   act.fct = "tanh",
#                   #linear.output = FALSE,
#                   #exclude = NULL,
#                   #constant.weights = NULL,
#                   #likelihood = FALSE
#                   )
out <<- neuralnet(mon11 ~ mon1 + mon2 + mon3 + mon4 + mon5 + mon6 + mon7 + mon8 + mon9 + mon10,
data.mat,
hidden=10,
rep=10,
err.fct="sse",
linear.output=FALSE
)
plot.nn(out)
test <<- as.data.frame(as.vector(d06.monthly[,"mon12"]))
#pred <<- compute(out, test[,1])
}
predict()
res <- unlist(out$net.result)
plot(res)
plot(res, type="l")
c(1:5)
a = c(1:5)
b = normalize.vector(a)
a =1:5
a
typeof(a)
b = normalize.vector(a)
install.packages('ppls')
a = 1:5
normalize.vector(a)
normalize.vector(a)
require(ppls)
b = normalize.vector(a)
b
require(ppls)
?normalize.vector
?predict

{
    "contents" : "# import library\n\nlibrary(\"gbm\")\n\n\nSolar <- T\n\n# import the data\n#\n#\n # table <- read.table(paste(pathData,\"Task_\",task,\"/Solar_Task\",task,\"_Zone\",zone,\".csv\", sep=\"\"), header=FALSE , sep=\";\", dec=\",\")\n\n\n  # create a big table containing the data and give names to the columns\n  realValues <- table[,2]                   #the \"power\" column should be the second one\n  cntInfluence <- length(table[1,]) -2      #the following columns are considered as influences\n\n  len <- length(realValues)\n  allValues <- cbind(numeric(0), realValues)\n  colnames(allValues) <- \"Real\"\n\n  for(count in seq(1,cntInfluence)){\n    allValues <- cbind(allValues,table[,(2+count)])\n    colnames(allValues) <- c(colnames(allValues)[1:(length(allValues[1,])-1)] , paste(\"inf\",as.character(count), sep=\"\"))\n\n  }\n\n\n  # so we set some values:\n  # the first index which should be forecasted.\n  fcStart <- len - 231 + 1   #e.g. the 231th last one\n  # the horizon: only the next 'horizon' values are computed before the real values for these timestamps are provided which are used for further models\n  horizon <- 12\n  # the number of valuesPerDay is needed for computing night values\n  valuesPerDay <- 24\n\n\n  #COMPUTATION\n\n  forecastValues <- numeric(0)\n\n\n  if(horizon<=0){\n    horizon <- length(realValues) - fcStart + 1\n  }\n  # Loop for every horizon\n\n  while (fcStart <= length(realValues)) {\n\n    if((fcStart + horizon) > length(realValues) ){\n      horizon <- length(realValues) - fcStart + 1\n    }\n\n\n    # this subset is the historical/training data\n    train_table <- allValues[1:(fcStart-1),]\n\n    if(Solar){\n      # for modeling we only use the timestamps with Power >0\n      train_noZeros <- data.frame(subset(train_table, train_table[,1]>0))\n\n      #modeling with default parameters\n      gbmmodel <- gbm(formula = (Real ~ .) , distribution =\"gaussian\", data=train_noZeros, n.trees=10000, interaction.depth = 10,\n                    n.minobsinnode = 5,\n                    shrinkage =  0.008)\n    }else{\n      #modeling with default parameters\n      gbmmodel <- gbm(formula = (Real ~ .) , distribution =\"gaussian\", data=data.frame(train_table), n.trees=10000, interaction.depth = 10,\n                      n.minobsinnode = 5,\n                      shrinkage =  0.008)\n    }\n    #prediction\n    test_table <- data.frame(allValues[(fcStart):(fcStart+horizon-1),-1])\n    newValues <- predict(gbmmodel, test_table, gbmmodel$n.trees)\n\n    if(Solar){\n      #Check if it is night by looking at the values 365 and 366 days before\n      for(i in seq(1,length(newValues))){\n        if((fcStart-1 + i - valuesPerDay*366)>0){\n          can_a <- train_table[fcStart-1 + i - valuesPerDay*365,1]\n          can_b  <- train_table[fcStart-1 + i - valuesPerDay*366,1]\n        } else {\n          #Or if there are not in the training set,\n          # at the values at this time for the last two days in the training set\n          mod <- i%%valuesPerDay\n          can_a <- train_table[fcStart-1 + mod - valuesPerDay,1]\n          can_b <- train_table[fcStart-1 + mod - valuesPerDay*2,1]\n        }\n        # dismiss all values that are <0 and those considered 'night values'\n        if((mean(c(can_a,can_b)) < 0.0001)||newValues[i]<0){\n          newValues[i] <-0\n        }\n      }\n    }\n\n    forecastValues <- c(forecastValues, newValues) #for smaller horizons\n    fcStart <- fcStart + horizon  #for smaller horizons\n  }\n\n\n\n  indexVec <- seq(0,length(forecastValues)-1)\n\n  oneFc <- cbind(indexVec, forecastValues)\n  # export\n#\n#\n  #write.table(oneFc, file = paste(pathData,\"/Task_\",task,\"/forecast_solar_task\",task,\"_R_gbm_Zone\",zone,\".csv\", sep=\"\"), sep=\";\", dec=\".\", row.names=FALSE, quote=FALSE)\n\n",
    "created" : 1419264584213.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2804334034",
    "id" : "4FEA99FF",
    "lastKnownWriteTime" : 1419270147,
    "path" : "~/Programming/Thesis/scripts_from_robert/gbm.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}